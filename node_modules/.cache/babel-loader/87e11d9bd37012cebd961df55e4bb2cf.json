{"ast":null,"code":"export const initialState = {\n  basket: []\n};\nexport const getCartTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_CART':\n      const i = state.basket.findIndex(basketItem => basketItem.id == action.id);\n      let newcart = [...state.basket];\n\n      if (index >= 0) {\n        newcart.splice(index, 1);\n      } else {\n        console.warn('Cant remove product as its not in the basket');\n      }\n\n      return { ...state,\n        basket: newcart\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/ezragomolin/Desktop/Clones/Amazon-Clone/src/reducer.js"],"names":["initialState","basket","getCartTotal","reduce","amount","item","price","reducer","state","action","type","i","findIndex","basketItem","id","newcart","index","splice","console","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE;AADgB,CAArB;AAIP,OAAO,MAAMC,YAAY,GAAID,MAAD,IACxBA,MADwB,aACxBA,MADwB,uBACxBA,MAAM,CAAEE,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADG;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFP,QAAAA,MAAM,EAAE,CAAC,GAAGO,KAAK,CAACP,MAAV,EAAkBQ,MAAM,CAACJ,IAAzB;AAFN,OAAN;;AAIJ,SAAK,kBAAL;AACI,YAAMM,CAAC,GAAGH,KAAK,CAACP,MAAN,CAAaW,SAAb,CACLC,UAAD,IAAgBA,UAAU,CAACC,EAAX,IAAiBL,MAAM,CAACK,EADlC,CAAV;AAGA,UAAIC,OAAO,GAAG,CAAC,GAAGP,KAAK,CAACP,MAAV,CAAd;;AACA,UAAGe,KAAK,IAAG,CAAX,EAAa;AACTD,QAAAA,OAAO,CAACE,MAAR,CAAeD,KAAf,EAAsB,CAAtB;AACH,OAFD,MAEK;AACDE,QAAAA,OAAO,CAACC,IAAR,CAAa,8CAAb;AACH;;AAED,aAAM,EACF,GAAGX,KADD;AAEFP,QAAAA,MAAM,EAAEc;AAFN,OAAN;;AAKJ;AACI,aAAOP,KAAP;AAvBR;AA0BH,CA3BD;;AA6BA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    basket: [],\n};\n\nexport const getCartTotal = (basket) =>\n    basket?.reduce((amount, item) => item.price + amount, 0)\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case 'ADD_TO_CART':\n            return{\n                ...state,\n                basket: [...state.basket, action.item],\n            };\n        case 'REMOVE_FROM_CART':\n            const i = state.basket.findIndex(\n                (basketItem) => basketItem.id == action.id\n            );\n            let newcart = [...state.basket];\n            if(index >=0){\n                newcart.splice(index, 1);\n            }else{\n                console.warn('Cant remove product as its not in the basket')\n            }\n\n            return{\n                ...state,\n                basket: newcart\n            }\n\n        default:\n            return state;\n    }\n\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}